{
  "compilerOptions": {
    "moduleResolution": "node",
    "target": "esnext",
    "module": "esnext",
    /**
     * svelte-preprocess cannot figure out whether you have
     * a value or a type, so tell TypeScript to enforce using
     * `import type` instead of `import` for Types.
     */
    "importsNotUsedAsValues": "error",
    "isolatedModules": true,
    "resolveJsonModule": true,
    /**
     * To have warnings / errors of the Svelte compiler at the
     * correct position, enable source maps by default.
     */
    "sourceMap": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "assets/*": ["./src/assets/*"],
      "components/*": ["./src/components/*"],
      "firestore/*": ["./src/firestore/*"],
      "routes/*": ["./src/routes/*"],
      "store/*": ["./src/store/*"],
      "styles/*": ["./src/styles/*"],
      "utils/*": ["./src/utils/*"],
      "data/*": ["./src/data/*"],
      "schemas/*": ["./src/schemas/*"],
    },
    /**
     * Typecheck JS in `.svelte` and `.js` files by default.
     * Disable this if you'd like to use dynamic types.
     */
    "checkJs": true
  },
  /**
   * Use global.d.ts instead of compilerOptions.types
   * to avoid limiting type declarations.
   */
  "exclude": ["node_modules"],
  "include": ["src/**/*.d.ts", "src/**/*.js", "src/**/*.svelte"]
}
